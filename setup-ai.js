// setup-ai.js - Quick setup script for AI integration
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('=== YesButFirst AI Setup ===\n');

const questions = [
  {
    name: 'provider',
    question: 'Which AI provider would you like to use?\n1. OpenAI (GPT-3.5) - $0.0016/interaction\n2. Claude (Haiku) - $0.0008/interaction\n3. Google Gemini - FREE tier available\n\nEnter 1, 2, or 3: ',
    validate: (answer) => ['1', '2', '3'].includes(answer),
    transform: (answer) => {
      const providers = { '1': 'openai', '2': 'claude', '3': 'gemini' };
      return providers[answer];
    }
  },
  {
    name: 'apiKey',
    question: (provider) => {
      const prompts = {
        openai: 'Enter your OpenAI API key (starts with sk-): ',
        claude: 'Enter your Claude API key: ',
        gemini: 'Enter your Gemini API key: '
      };
      return prompts[provider];
    },
    validate: (answer) => answer.length > 10
  },
  {
    name: 'childAge',
    question: 'Enter child age (6-17, or press Enter to skip): ',
    validate: (answer) => !answer || (parseInt(answer) >= 6 && parseInt(answer) <= 17),
    transform: (answer) => answer || ''
  }
];

async function askQuestion(q, previousAnswers = {}) {
  return new Promise((resolve) => {
    const questionText = typeof q.question === 'function' ? q.question(previousAnswers.provider) : q.question;
    
    rl.question(questionText, (answer) => {
      if (q.validate && !q.validate(answer)) {
        console.log('Invalid input, please try again.\n');
        resolve(askQuestion(q, previousAnswers));
      } else {
        resolve(q.transform ? q.transform(answer) : answer);
      }
    });
  });
}

async function setup() {
  const answers = {};
  
  for (const q of questions) {
    answers[q.name] = await askQuestion(q, answers);
  }
  
  // Create .env file
  const envContent = `# YesButFirst Environment Configuration
# Generated by setup script

# AI Provider
AI_PROVIDER=${answers.provider}

# API Keys
OPENAI_API_KEY=${answers.provider === 'openai' ? answers.apiKey : 'your-openai-key-here'}
CLAUDE_API_KEY=${answers.provider === 'claude' ? answers.apiKey : 'your-claude-key-here'}
GEMINI_API_KEY=${answers.provider === 'gemini' ? answers.apiKey : 'your-gemini-key-here'}

# Child Settings
CHILD_AGE=${answers.childAge}

# Cost Control
MAX_DAILY_COST=5.00
`;

  fs.writeFileSync('.env', envContent);
  console.log('\nâœ“ Configuration saved to .env file');
  
  // Update ai-config.js to use dotenv
  const configPath = path.join(__dirname, 'ai-config.js');
  let configContent = fs.readFileSync(configPath, 'utf8');
  
  if (!configContent.includes('require(\'dotenv\')')) {
    configContent = `require('dotenv').config();\n${configContent}`;
    fs.writeFileSync(configPath, configContent);
    console.log('âœ“ Updated ai-config.js to use environment variables');
  }
  
  console.log('\n=== Setup Complete! ===');
  console.log('\nTo test the AI integration:');
  console.log('1. Run: npm install');
  console.log('2. Test: npm run start-ai');
  console.log('\nEstimated costs:');
  
  const costs = {
    openai: 0.0016,
    claude: 0.0008,
    gemini: 0.00002
  };
  
  const cost = costs[answers.provider];
  console.log(`- Per interaction: $${cost}`);
  console.log(`- 100 users/day: $${(cost * 100 * 30).toFixed(2)}/month`);
  console.log(`- 1000 users/day: $${(cost * 1000 * 30).toFixed(2)}/month`);
  
  if (answers.provider === 'gemini') {
    console.log('\nðŸ“Œ Note: Gemini includes 1M free tokens per day!');
    console.log('   That\'s about 1,666 free interactions daily.');
  }
  
  rl.close();
}

setup().catch(console.error);